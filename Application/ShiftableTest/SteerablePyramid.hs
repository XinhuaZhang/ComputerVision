module Application.ShiftableTest.SteerablePyramid where

import           Control.Monad      as M
import           Data.Array.MArray
import           Data.Array.ST
import           Data.Array.Unboxed
import           Data.Image
import           Data.List          as L

type Filter = [[Double]]

{-# INLINE reflect #-}

reflect :: [[a]] -> [[a]]
reflect = L.reverse . L.map L.reverse

{-# INLINE loop #-}

loop :: Int -> Int -> Filter -> [Filter] -> GrayImage -> [[GrayImage]]
loop maxIteration n l1 bs img
  | maxIteration == n ||
      r < L.length l1 || c < (L.length . L.head $ l1) || odd r || odd c =
    [[img]]
  | otherwise =
    (L.map (`convolve` img) bs) :
    loop maxIteration (n + 1) l1 bs (downsample . convolve l1 $ img)
  where
    r = rows img
    c = cols img

steerablePyramid :: Int
                 -> Filter
                 -> Filter
                 -> Filter
                 -> [Filter]
                 -> GrayImage
                 -> [[GrayImage]]
steerablePyramid n h0 l0 l1 bs img =
  [convolve h0 img] : loop n 0 l1 (reflect bs) (convolve l0 img)

plotSteerablePyramid :: FilePath -> [[GrayImage]] -> IO ()
plotSteerablePyramid filePath xs = do
  let r = rows . L.head . L.head $ xs
      c = cols . L.head . L.head $ xs
      imgArr =
        runSTUArray $
        do arr <- newArray ((0, 0), (2 * r - 1, 2 * c - 1)) 0
           M.foldM_
             (\((x, y), n) zs -> do
                let origins =
                      [(x, y), (x + div r (2 ^ n), y), (x, y + div c (2 ^ n))]
                M.zipWithM_
                  (\(oa, ob) z ->
                      M.mapM_
                        (\(a, b) -> writeArray arr (oa + a, ob + b) (ref z a b))
                        [ (i, j)
                        | i <- [0 .. div r (2 ^ n) - 1]
                        , j <- [0 .. div c (2 ^ n) - 1] ])
                  origins
                  zs
                return ((x + div r (2 ^ n), y + div c (2 ^ n)), n + 1))
             ((0, 0), 0 :: Int) .
             L.tail $
             xs
           return arr
      img = makeImage (2 * r) (2 * c) (\i j -> imgArr ! (i, j)) :: GrayImage
  writeImage (filePath L.++ "_h0.pgm") . L.head . L.head $ xs
  writeImage (filePath L.++ "_pyramid.pgm") img


{-# INLINE makeSteerableFilter #-}

makeSteerableFilter :: Filter -> Filter
makeSteerableFilter = L.map (L.map (/ 10000))

{-# INLINE h0 #-}

h0 :: Filter
h0 = makeSteerableFilter [ [14, -8, -19, -2, 19, 17, 8, 9, 12, 9, 8, 17, 19, -2, -19, -8, 14]
                          , [ -8, 1, 13, 7, -12, -22, -23, -20, -18, -20, -23, -22, -12, 7, 13, 1, -8]
                          , [ -19, 13, 20, -2, -19, -15, -2, 2, 1, 2, -2, -15, -19, -2, 20, 13, -19]
                          , [-2, 7, -2, -11, -9, 25, 61, 56, 45, 56, 61, 25, -9, -11, -2, 7, -2]
                          , [ 19, -12, -19, -9, 24, 46, -12, -96, -128, -96, -12, 46, 24, -9, -19, -12, 19]
                          , [ 17, -22, -15, 25, 46, -78, -154, -27, 61, -27, -154, -78, 46, 25, -15, -22, 17]
                          , [ 8, -23, -2, 61, -12, -154, 179, 453, 373, 453, 179, -154, -12, 61, -2, -23, 8]
                          , [ 9, -20, 2, 56, -96, -27, 453, -614, -1903, -614, 453, -27, -96, 56, 2, -20, 9]
                          , [ 12, -18, 1, 45, -128, 61, 373, -1903, 5896, -1903, 373, 61, -128, 45, 1, -18, 12]
                          , [ 9, -20, 2, 56, -96, -27, 453, -614, -1903, -614, 453, -27, -96, 56, 2, -20, 9]
                          , [ 8, -23, -2, 61, -12, -154, 179, 453, 373, 453, 179, -154, -12, 61, -2, -23, 8]
                          , [ 17, -22, -15, 25, 46, -78, -154, -27, 61, -27, -154, -78, 46, 25, -15, -22, 17]
                          , [ 19, -12, -19, -9, 24, 46, -12, -96, -128, -96, -12, 46, 24, -9, -19, -12, 19]
                          , [-2, 7, -2, -11, -9, 25, 61, 56, 45, 56, 61, 25, -9, -11, -2, 7, -2]
                          , [ -19, 13, 20, -2, -19, -15, -2, 2, 1, 2, -2, -15, -19, -2, 20, 13, -19]
                          , [ -8, 1, 13, 7, -12, -22, -23, -20, -18, -20, -23, -22, -12, 7, 13, 1, -8]
                          , [14, -8, -19, -2, 19, 17, 8, 9, 12, 9, 8, 17, 19, -2, -19, -8, 14]]

{-# INLINE l0 #-}

l0 :: Filter
l0 = makeSteerableFilter [ [6, -13, 7, 4, 1, -4, -8, 0, -4, 0, -8, -4, 1, 4, 7, -13, 6]
     , [-13, 22, -3, -14, -4, 14, 16, 1, 1, 1, 16, 14, -4, -14, -3, 22, -13]
     , [7, -3, -19, 22, 6, -26, -19, -5, 13, -5, -19, -26, 6, 22, -19, -3, 7]
     , [4, -14, 22, -12, -20, 37, 47, 14, -12, 14, 47, 37, -20, -12, 22, -14, 4]
     , [1, -4, 6, -20, 45, -17, -114, -66, -44, -66, -114, -17, 45, -20, 6, -4, 1]
     , [-4, 14, -26, 37, -17, -79, 137, 244, 190, 244, 137, -79, -17, 37, -26, 14, -4]
     , [-8, 16, -19, 47, -114, 137, 78, -487, -617, -487, 78, 137, -114, 47, -19, 16, -8]
     , [0, 1, -5, 14, -66, 244, -487, 229, 1893, 229, -487, 244, -66, 14, -5, 1, 0]
     , [-4, 1, 13, -12, -44, 190, -617, 1893, 5236, 1893, -617, 190, -44, -12, 13, 1, -4]
     , [0, 1, -5, 14, -66, 244, -487, 229, 1893, 229, -487, 244, -66, 14, -5, 1, 0]
     , [-8, 16, -19, 47, -114, 137, 78, -487, -617, -487, 78, 137, -114, 47, -19, 16, -8]
     , [-4, 14, -26, 37, -17, -79, 137, 244, 190, 244, 137, -79, -17, 37, -26, 14, -4]
     , [1, -4, 6, -20, 45, -17, -114, -66, -44, -66, -114, -17, 45, -20, 6, -4, 1]
     , [4, -14, 22, -12, -20, 37, 47, 14, -12, 14, 47, 37, -20, -12, 22, -14, 4]
     , [7, -3, -19, 22, 6, -26, -19, -5, 13, -5, -19, -26, 6, 22, -19, -3, 7]
     , [-13, 22, -3, -14, -4, 14, 16, 1, 1, 1, 16, 14, -4, -14, -3, 22, -13]
     , [6, -13, 7, 4, 1, -4, -8, 0, -4, 0, -8, -4, 1, 4, 7, -13, 6]]

{-# INLINE  l1 #-}

l1 :: Filter
l1 = makeSteerableFilter [[1,2,1,-2,-8,-11,-12,-10,-9,-10,-12,-11,-8,-2,1,2,1],  [2,-1,-3,-2,3,8,12,13,13,13,12,8,3,-2,-3,-1,2],  [1,-3,-5,1,11,19,19,14,10,14,19,19,11,1,-5,-3,1], [-2,-2,1,5,7,1,-11,-25,-31,-25,-11,1,7,5,1,-2,-2], [-8,3,11,7,-11,-30,-39,-40,-39,-40,-39,-30,-11,7,11,3,-8], [-11,8,19,1,-30,-35,4,63,91,63,4,-35,-30,1,19,8,-11], [-12,12,19,-11,-39,4,141,300,371,300,141,4,-39,-11,19,12,-12], [-10,13,14,-25,-40,63,300,559,671,559,300,63,-40,-25,14,13,-10], [-9,13,10,-31,-39,91,371,671,801,671,371,91,-39,-31,10,13,-9], [-10,13,14,-25,-40,63,300,559,671,559,300,63,-40,-25,14,13,-10], [-12,12,19,-11,-39,4,141,300,371,300,141,4,-39,-11,19,12,-12], [-11,8,19,1,-30,-35,4,63,91,63,4,-35,-30,1,19,8,-11], [-8,3,11,7,-11,-30,-39,-40,-39,-40,-39,-30,-11,7,11,3,-8], [-2,-2,1,5,7,1,-11,-25,-31,-25,-11,1,7,5,1,-2,-2], [1,-3,-5,1,11,19,19,14,10,14,19,19,11,1,-5,-3,1], [2,-1,-3,-2,3,8,12,13,13,13,12,8,3,-2,-3,-1,2], [1,2,1,-2,-8,-11,-12,-10,-9,-10,-12,-11,-8,-2,1,2,1]]

{-# INLINE b31 #-}

b31 :: Filter
b31 = makeSteerableFilter [[6,-11,-2,11,6,-16,-29,-26,-23,-26,-29,-16,6,11,-2,-11,6],[-4,-1,6,-7,-7,11,25,31,30,31,25,11,-7,-7,6,-1,-4],[-5,4,-7,-7,2,-10,-30,-29,-21,-29,-30,-10,2,-7,-7,4,-5],[1,-6,-10,5,-14,-15,32,82,106,82,32,-15,-14,5,-10,-6,1],[-5,-4,4,-18,-18,29,-6,-66,-71,-66,-6,29,-18,-18,4,-4,-5],[0,-7,-9,-11,15,-50,-111,89,264,89,-111,-50,15,-11,-9,-7,0],[-5,-1,-6,-3,-30,-70,37,54,-38,54,37,-70,-30,-3,-6,-1,-5],[-1,-2,-6,0,-26,-12,-207,-1192,-1936,-1192,-207,-12,-26,0,-6,-2,-1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,2,6,0,26,12,207,1192,1936,1192,207,12,26,0,6,2,1],[5,1,6,3,30,70,-37,-54,38,-54,-37,70,30,3,6,1,5],[0,7,9,11,-15,50,111,-89,-264,-89,111,50,-15,11,9,7,0],[5,4,-4,18,18,-29,6,66,71,66,6,-29,18,18,-4,4,5],[-1,6,10,-5,14,15,-32,-82,-106,-82,-32,15,14,-5,10,6,-1],[5,-4,7,7,-2,10,30,29,21,29,30,10,-2,7,7,-4,5],[4,1,-6,7,7,-11,-25,-31,-30,-31,-25,-11,7,7,-6,1,4],[-6,11,2,-11,-6,16,29,26,23,26,29,16,-6,-11,2,11,-6]]

{-# INLINE b32 #-}

b32 :: Filter
b32 = makeSteerableFilter [[11,-10,-4,7,2,-4,-14,-8,-8,-6,-7,-7,5,5,6,-4,-1],[-9,0,15,-6,-8,-3,6,5,0,4,3,10,2,1,2,2,11],[0,18,-7,-7,14,-6,-18,-23,-13,-9,-8,-2,-4,9,5,5,2],[18,1,-3,22,-19,-19,13,16,7,-3,5,2,9,3,1,10,-1],[15,1,26,-7,-3,63,-12,-69,-60,-34,-1,-6,6,3,9,6,1],[-4,15,10,2,95,-31,-111,-11,-10,-7,9,25,10,7,13,-8,19],[-21,25,-19,55,45,-59,297,-36,-395,-36,17,49,25,-8,25,-12,25],[-19,23,-34,66,-67,128,283,-1316,-1105,514,214,19,76,-26,30,-15,22],[-20,14,-30,52,-107,94,-275,-1757,0,1757,275,-94,107,-52,30,-14,20],[-22,15,-30,26,-76,-19,-214,-514,1105,1316,-283,-128,67,-66,34,-23,19],[-25,12,-25,8,-25,-49,-17,36,395,36,-297,59,-45,-55,19,-25,21],[-19,8,-13,-7,-10,-25,-9,7,10,11,111,31,-95,-2,-10,-15,4],[-1,-6,-9,-3,-6,6,1,34,60,69,12,-63,3,7,-26,-1,-15],[1,-10,-1,-3,-9,-2,-5,3,-7,-16,-13,19,19,-22,3,-1,-18],[-2,-5,-5,-9,4,2,8,9,13,23,18,6,-14,7,7,-18,0],[-11,-2,-2,-1,-2,-10,-3,-4,0,-5,-6,3,8,6,-15,0,9],[1,4,-6,-5,-5,7,7,6,8,8,14,4,-2,-7,4,10,-11]]

{-# INLINE b33 #-}

b33 :: Filter
b33 = makeSteerableFilter [[1,4,-6,-5,-5,7,7,6,8,8,14,4,-2,-7,4,10,-11],[-11,-2,-2,-1,-2,-10,-3,-4,0,-5,-6,3,8,6,-15,0,9],[-2,-5,-5,-9,4,2,8,9,13,23,18,6,-14,7,7,-18,0],[1,-10,-1,-3,-9,-2,-5,3,-7,-16,-13,19,19,-22,3,-1,-18],[-1,-6,-9,-3,-6,6,1,34,60,69,12,-63,3,7,-26,-1,-15],[-19,8,-13,-7,-10,-25,-9,7,10,11,111,31,-95,-2,-10,-15,4],[-25,12,-25,8,-25,-49,-17,36,395,36,-297,59,-45,-55,19,-25,21],[-22,15,-30,26,-76,-19,-214,-514,1105,1316,-283,-128,67,-66,34,-23,19],[-20,14,-30,52,-107,94,-275,-1757,0,1757,275,-94,107,-52,30,-14,20],[-19,23,-34,66,-67,128,283,-1316,-1105,514,214,19,76,-26,30,-15,22],[-21,25,-19,55,45,-59,297,-36,-395,-36,17,49,25,-8,25,-12,25],[-4,15,10,2,95,-31,-111,-11,-10,-7,9,25,10,7,13,-8,19],[15,1,26,-7,-3,63,-12,-69,-60,-34,-1,-6,6,3,9,6,1],[18,1,-3,22,-19,-19,13,16,7,-3,5,2,9,3,1,10,-1],[0,18,-7,-7,14,-6,-18,-23,-13,-9,-8,-2,-4,9,5,5,2],[-9,0,15,-6,-8,-3,6,5,0,4,3,10,2,1,2,2,11],[11,-10,-4,7,2,-4,-14,-8,-8,-6,-7,-7,5,5,6,-4,-1]]
